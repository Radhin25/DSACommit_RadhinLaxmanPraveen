150. Evaluate Reverse Polish Notation
You are given an array of strings tokens that represents an arithmetic expression in a Reverse Polish Notation.
Evaluate the expression. Return an integer that represents the value of the expression.

üîÅ Step-by-Step Logic:
Initialize a stack to store operands (numbers).

Iterate through each token in the input list:

If the token is a number:

Convert it from a string to an integer using stoi(token) and push it onto the stack.

If the token is an operator (+, -, *, /):

Pop the top two numbers from the stack.

Apply the operator on them in the correct order:

For example: if you pop b first and then a, then a <op> b.

Push the result back onto the stack.

After processing all tokens, the top of the stack will contain the final result.

class Solution {
public:
    int evalRPN(vector<string>& tokens) {
        stack<int> st; // Stack to store operands
        
        for (int i = 0; i < tokens.size(); i++) {
            string token = tokens[i];
            
            // Check if the token is an operator
            if (token == "+" || token == "-" || token == "*" || token == "/") {
                // Pop the top two elements
                int b = st.top(); st.pop();
                int a = st.top(); st.pop();
                int result = 0;
                
                // Apply the operator
                if (token == "+") result = a + b;
                else if (token == "-") result = a - b;
                else if (token == "*") result = a * b;
                else if (token == "/") result = a / b;

                // Push the result back onto the stack
                st.push(result);
            } else {
                // Convert string to integer and push
                st.push(stoi(token));
            }
        }
        
        return st.top(); // Final result
        
    }
};
